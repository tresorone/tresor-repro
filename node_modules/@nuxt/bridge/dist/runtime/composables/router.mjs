import { getCurrentInstance, reactive } from "vue";
import { sendRedirect } from "h3";
import { useRouter as useVueRouter, useRoute as useVueRoute } from "vue-router/composables";
import { hasProtocol, joinURL, parseURL } from "ufo";
import { useNuxtApp, callWithNuxt, useRuntimeConfig } from "../nuxt.mjs";
import { createError, showError } from "./error.mjs";
export const useRouter = () => {
  if (getCurrentInstance()) {
    return useVueRouter();
  }
  return useNuxtApp()?.nuxt2Context.app.router;
};
export const useRoute = () => {
  if (getCurrentInstance()) {
    return useVueRoute();
  }
  const nuxtApp = useNuxtApp();
  if (!nuxtApp._route) {
    Object.defineProperty(nuxtApp, "__route", {
      get: () => nuxtApp.nuxt2Context.app.context.route
    });
    nuxtApp._route = reactive(nuxtApp.__route);
    const router = useRouter();
    router.afterEach((route) => Object.assign(nuxtApp._route, route));
  }
  return nuxtApp._route;
};
function convertToLegacyMiddleware(middleware) {
  return async (ctx) => {
    ctx.$_nuxtApp._processingMiddleware = true;
    const result = await callWithNuxt(ctx.$_nuxtApp, middleware, [ctx.route, ctx.from]);
    delete ctx.$_nuxtApp._processingMiddleware;
    if (result instanceof Error) {
      return ctx.error(result);
    }
    if (result) {
      return ctx.redirect(result);
    }
    return result;
  };
}
const isProcessingMiddleware = () => {
  try {
    if (useNuxtApp()._processingMiddleware) {
      return true;
    }
  } catch {
    return true;
  }
  return false;
};
export const navigateTo = (to, options) => {
  if (!to) {
    to = "/";
  }
  const toPath = typeof to === "string" ? to : to.path || "/";
  const isExternal = hasProtocol(toPath, true);
  if (isExternal && !options?.external) {
    throw new Error("Navigating to external URL is not allowed by default. Use `nagivateTo (url, { external: true })`.");
  }
  if (isExternal && parseURL(toPath).protocol === "script:") {
    throw new Error("Cannot navigate to an URL with script protocol.");
  }
  if (process.client && !isExternal && isProcessingMiddleware()) {
    return to;
  }
  const router = useRouter();
  if (process.server) {
    const nuxtApp = useNuxtApp();
    if (nuxtApp.ssrContext && nuxtApp.ssrContext.event) {
      const redirectLocation = isExternal ? toPath : joinURL(useRuntimeConfig().app.baseURL, router.resolve(to).resolved.fullPath || "/");
      return nuxtApp.callHook("app:redirected").then(() => sendRedirect(nuxtApp.ssrContext.event, redirectLocation, options?.redirectCode || 302));
    }
  }
  if (isExternal) {
    if (options?.replace) {
      location.replace(toPath);
    } else {
      location.href = toPath;
    }
    return Promise.resolve();
  }
  return options?.replace ? router.replace(to) : router.push(to);
};
export const abortNavigation = (err) => {
  if (process.dev && !isProcessingMiddleware()) {
    throw new Error("abortNavigation() is only usable inside a route middleware handler.");
  }
  if (!err) {
    return false;
  }
  err = createError(err);
  if (err.fatal) {
    const nuxtApp = useNuxtApp();
    callWithNuxt(nuxtApp, showError, [err]);
  }
  throw err;
};
export const defineNuxtRouteMiddleware = (middleware) => convertToLegacyMiddleware(middleware);
export const addRouteMiddleware = (name, middleware, options = {}) => {
  const nuxtApp = useNuxtApp();
  if (options.global || typeof name === "function") {
    nuxtApp._middleware.global.push(typeof name === "function" ? name : middleware);
  } else {
    nuxtApp._middleware.named[name] = convertToLegacyMiddleware(middleware);
  }
};
