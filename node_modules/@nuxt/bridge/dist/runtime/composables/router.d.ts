import type VueRouter from 'vue-router';
import type { Location, RawLocation, Route, NavigationFailure } from 'vue-router';
import type { NuxtError } from './error';
export declare const useRouter: () => VueRouter;
export declare const useRoute: () => Route;
export interface AddRouteMiddlewareOptions {
    global?: boolean;
}
export interface NavigateToOptions {
    replace?: boolean;
    redirectCode?: number;
    external?: boolean;
}
export declare const navigateTo: (to: RawLocation | undefined | null, options?: NavigateToOptions) => Promise<void | Route | NavigationFailure> | RawLocation | Route;
/** This will abort navigation within a Nuxt route middleware handler. */
export declare const abortNavigation: (err?: string | Partial<NuxtError>) => boolean;
type RouteMiddlewareReturn = void | Error | string | Location | boolean | Route;
export interface RouteMiddleware {
    (to: Route, from: Route): RouteMiddlewareReturn | Promise<RouteMiddlewareReturn>;
}
export declare const defineNuxtRouteMiddleware: (middleware: RouteMiddleware) => (ctx: any) => Promise<any>;
interface AddRouteMiddleware {
    (name: string, middleware: RouteMiddleware, options?: AddRouteMiddlewareOptions): void;
    (middleware: RouteMiddleware): void;
}
export declare const addRouteMiddleware: AddRouteMiddleware;
export {};
