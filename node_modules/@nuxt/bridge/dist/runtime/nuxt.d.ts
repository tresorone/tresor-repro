import type { RuntimeConfig } from '@nuxt/schema';
import type { NuxtAppCompat } from '@nuxt/bridge-schema';
import type { Ref } from 'vue';
import type { MetaInfo } from 'vue-meta';
export interface Context {
    $_nuxtApp: NuxtAppCompat;
}
type Reffed<T extends Record<string, any>> = {
    [P in keyof T]: T[P] extends Array<infer A> ? Ref<Array<Reffed<A>>> | Array<Reffed<A>> : T[P] extends Record<string, any> ? Reffed<T[P]> | Ref<Reffed<T[P]>> : T[P] | Ref<T[P]>;
};
export declare const useNuxt2Meta: (metaOptions: Reffed<MetaInfo> | (() => Reffed<MetaInfo>)) => void;
export declare const setNuxtAppInstance: (nuxt: NuxtAppCompat | null) => void;
/**
 * Ensures that the setup function passed in has access to the Nuxt instance via `useNuxt`.
 * @param nuxt A Nuxt instance
 * @param setup The function to call
 */
export declare function callWithNuxt<T extends (...args: any[]) => any>(nuxt: NuxtAppCompat, setup: T, args?: Parameters<T>): ReturnType<T>;
interface Plugin {
    (nuxt: NuxtAppCompat): Promise<void> | Promise<{
        provide?: Record<string, any>;
    }> | void | {
        provide?: Record<string, any>;
    };
}
export declare function defineNuxtPlugin(plugin: Plugin): (ctx: Context, inject: (id: string, value: any) => void) => void;
export declare const useNuxtApp: () => NuxtAppCompat;
export declare const useRuntimeConfig: () => RuntimeConfig;
export {};
