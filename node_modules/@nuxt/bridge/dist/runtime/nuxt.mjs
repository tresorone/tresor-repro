import { getCurrentInstance, reactive, onBeforeUnmount, watch, isRef } from "vue";
import { defu } from "defu";
function unwrap(value) {
  if (!value || typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map((i) => unwrap(i));
  }
  if (isRef(value)) {
    return unwrap(value.value);
  }
  if (typeof value === "object") {
    return Object.fromEntries(Object.entries(value).map(([key, value2]) => [key, unwrap(value2)]));
  }
  return value;
}
function metaInfoFromOptions(metaOptions) {
  return metaOptions instanceof Function ? metaOptions : () => metaOptions;
}
export const useNuxt2Meta = (metaOptions) => {
  let vm = null;
  try {
    vm = getCurrentInstance().proxy;
    const meta = vm.$meta();
    const $root = vm.$root;
    if (!vm._vueMeta) {
      vm._vueMeta = true;
      let parent = vm.$parent;
      while (parent && parent !== $root) {
        if (parent._vueMeta === void 0) {
          parent._vueMeta = false;
        }
        parent = parent.$parent;
      }
    }
    vm.$options.head = vm.$options.head || {};
    const unwatch = watch(metaInfoFromOptions(metaOptions), (metaInfo) => {
      vm.$metaInfo = {
        ...vm.$metaInfo || {},
        ...unwrap(metaInfo)
      };
      if (process.client) {
        meta.refresh();
      }
    }, { immediate: true, deep: true });
    onBeforeUnmount(unwatch);
  } catch {
    const app = useNuxtApp().nuxt2Context.app;
    if (typeof app.head === "function") {
      const originalHead = app.head;
      app.head = function() {
        const head = originalHead.call(this) || {};
        return defu(unwrap(metaInfoFromOptions(metaOptions)()), head);
      };
    } else {
      app.head = defu(unwrap(metaInfoFromOptions(metaOptions)()), app.head);
    }
  }
};
let currentNuxtAppInstance;
export const setNuxtAppInstance = (nuxt) => {
  currentNuxtAppInstance = nuxt;
};
export function callWithNuxt(nuxt, setup, args) {
  setNuxtAppInstance(nuxt);
  const p = args ? setup(...args) : setup();
  if (process.server) {
    setNuxtAppInstance(null);
  }
  return p;
}
export function defineNuxtPlugin(plugin) {
  return async (ctx, inject) => {
    const result = await callWithNuxt(ctx.$_nuxtApp, plugin, [ctx.$_nuxtApp]);
    if (result && result.provide) {
      for (const key in result.provide) {
        inject(key, result.provide[key]);
      }
    }
    return result;
  };
}
export const useNuxtApp = () => {
  const vm = getCurrentInstance();
  if (!vm) {
    if (!currentNuxtAppInstance) {
      throw new Error("nuxt app instance unavailable");
    }
    return currentNuxtAppInstance;
  }
  return vm.proxy.$_nuxtApp;
};
export const useRuntimeConfig = () => {
  const nuxtApp = useNuxtApp();
  if (nuxtApp._config) {
    return nuxtApp._config;
  }
  nuxtApp._config = reactive(nuxtApp.$config);
  return nuxtApp._config;
};
