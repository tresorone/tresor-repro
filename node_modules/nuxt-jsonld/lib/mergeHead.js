"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJsonLdHeadObject = void 0;
var getOriginalHeadObject = function (that, originalHead) {
    if (typeof originalHead === 'function') {
        return originalHead.call(that);
    }
    return originalHead || null;
};
function hashCode(s) {
    /**
     * Using the java hashCode function
     * https://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
     * https://www.thejavaprogrammer.com/what-is-hashcode-in-java/
     */
    var hash = 0;
    for (var i = 0; i < s.length; i += 1) {
        var char = s.charCodeAt(i);
        hash = (hash << 5) - hash + char; // eslint-disable-line no-bitwise
        hash &= hash; // eslint-disable-line no-bitwise
    }
    return hash;
}
var getJsonLdHeadObject = function (that, jsonLdFunc) {
    var jsonLd = jsonLdFunc.call(that);
    if (jsonLd === null) {
        return null;
    }
    var minifiedString = JSON.stringify(jsonLd, null, '');
    var hid = "nuxt-jsonld-" + hashCode(minifiedString).toString(16);
    return {
        script: [
            {
                hid: hid,
                type: 'application/ld+json',
                json: jsonLd,
            },
        ],
    };
};
exports.getJsonLdHeadObject = getJsonLdHeadObject;
var isEmptyObject = function (obj) { return obj === undefined || obj === null || Object.keys(obj).length === 0; };
function mergeHead(originalHead) {
    var head = getOriginalHeadObject(this, originalHead);
    var jsonLd = (0, exports.getJsonLdHeadObject)(this, this.$options.jsonld);
    if (isEmptyObject(head) && jsonLd === null) {
        return {};
    }
    if (isEmptyObject(head)) {
        return jsonLd;
    }
    if (jsonLd === null) {
        return head;
    }
    return __assign(__assign({}, head), { script: __spreadArray(__spreadArray([], (head.script || []), true), jsonLd.script, true) });
}
exports.default = mergeHead;
