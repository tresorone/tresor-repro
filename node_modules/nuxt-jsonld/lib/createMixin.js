"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mergeHead_1 = __importStar(require("./mergeHead"));
exports.default = (function () {
    // @ts-ignore
    var isGenerating = process.server === undefined && process.client === undefined;
    return isGenerating
        ? {
            // When generating static site, we need to use `created` to access `this` of the component.
            created: function () {
                if (this.$options && typeof this.$options.jsonld === 'function') {
                    var vApp = this.$meta().addApp('nuxt-jsonld');
                    var jsonld = (0, mergeHead_1.getJsonLdHeadObject)(this, this.$options.jsonld);
                    if (jsonld !== null) {
                        // @ts-ignore
                        vApp.set(jsonld);
                    }
                }
            },
        }
        : {
            // On server and client side, we need to use beforeCreate to update head function before it is called
            beforeCreate: function () {
                var _this = this;
                var _a, _b;
                if (this.$options && typeof this.$options.jsonld === 'function') {
                    var originalHead_1 = (_a = this.$options.head) !== null && _a !== void 0 ? _a : (_b = this.$options.computed) === null || _b === void 0 ? void 0 : _b.$metaInfo;
                    this.$options.head = function () {
                        return mergeHead_1.default.call(_this, originalHead_1);
                    };
                }
            },
        };
});
