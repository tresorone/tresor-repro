'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vueDemi = require('vue-demi');
var useQueryClient = require('./useQueryClient.js');
var utils = require('./utils.js');

function useIsMutating(arg1, arg2) {
  var _filters$value$queryC;

  if (process.env.NODE_ENV === 'development') {
    if (!vueDemi.getCurrentScope()) {
      console.warn('vue-query composables like "useQuery()" should only be used inside a "setup()" function or a running effect scope. They might otherwise lead to memory leaks.');
    }
  }

  const filters = vueDemi.computed(() => parseFilterArgs(arg1, arg2));
  const queryClient = (_filters$value$queryC = filters.value.queryClient) != null ? _filters$value$queryC : useQueryClient.useQueryClient(filters.value.queryClientKey);
  const isMutating = vueDemi.ref();

  const listener = () => {
    isMutating.value = queryClient.isMutating(filters);
  };

  const unsubscribe = queryClient.getMutationCache().subscribe(listener);
  vueDemi.watchEffect(listener);
  vueDemi.onScopeDispose(() => {
    unsubscribe();
  });
  return isMutating;
}
function parseFilterArgs(arg1, arg2 = {}) {
  const plainArg1 = vueDemi.unref(arg1);
  const plainArg2 = vueDemi.unref(arg2);
  let options = plainArg1;

  if (utils.isQueryKey(plainArg1)) {
    options = { ...plainArg2,
      mutationKey: plainArg1
    };
  } else {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    options = plainArg1 || {};
  }

  return utils.cloneDeepUnref(options);
}

exports.parseFilterArgs = parseFilterArgs;
exports.useIsMutating = useIsMutating;
//# sourceMappingURL=useIsMutating.js.map
