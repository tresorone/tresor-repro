import type { InfiniteQueryObserverOptions, QueryKey, QueryObserverOptions } from '@tanstack/query-core';
import type { Ref, UnwrapRef } from 'vue-demi';
import type { QueryClient } from './queryClient';
declare type Primitive = string | number | boolean | bigint | symbol | undefined | null;
declare type UnwrapLeaf = Primitive | Function | Date | Error | RegExp | Map<any, any> | WeakMap<any, any> | Set<any> | WeakSet<any>;
export declare type MaybeRefDeep<T> = MaybeRef<T extends Function ? T : T extends object ? {
    [Property in keyof T]: MaybeRefDeep<T[Property]>;
} : T>;
export declare type MaybeRef<T> = Ref<T> | T;
export declare type MaybeRefOrGetter<T> = MaybeRef<T> | (() => T);
export declare type DeepUnwrapRef<T> = T extends UnwrapLeaf ? T : T extends Ref<infer U> ? DeepUnwrapRef<U> : T extends {} ? {
    [Property in keyof T]: DeepUnwrapRef<T[Property]>;
} : UnwrapRef<T>;
export declare type WithQueryClientKey<T> = T & {
    queryClientKey?: string;
    queryClient?: QueryClient;
};
export declare type VueQueryObserverOptions<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = {
    [Property in keyof QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>]: Property extends 'queryFn' ? QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, DeepUnwrapRef<TQueryKey>>[Property] : Property extends 'enabled' ? MaybeRefOrGetter<QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>[Property]> : MaybeRef<QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>[Property]>;
};
export declare type VueInfiniteQueryObserverOptions<TQueryFnData = unknown, TError = unknown, TData = unknown, TQueryData = unknown, TQueryKey extends QueryKey = QueryKey> = {
    [Property in keyof InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>]: Property extends 'queryFn' ? InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, DeepUnwrapRef<TQueryKey>>[Property] : Property extends 'enabled' ? MaybeRefOrGetter<QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>[Property]> : MaybeRef<InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>[Property]>;
};
export declare type DistributiveOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;
export {};
//# sourceMappingURL=types.d.ts.map