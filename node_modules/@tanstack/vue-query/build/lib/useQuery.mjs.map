{"version":3,"file":"useQuery.mjs","sources":["../../src/useQuery.ts"],"sourcesContent":["import { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefinedQueryObserverResult,\n  QueryFunction,\n  QueryKey,\n} from '@tanstack/query-core'\nimport type { UseQueryReturnType as UQRT } from './useBaseQuery'\nimport type {\n  DeepUnwrapRef,\n  MaybeRef,\n  VueQueryObserverOptions,\n  WithQueryClientKey,\n} from './types'\n\nexport type UseQueryReturnType<TData, TError> = UQRT<TData, TError>\n\nexport type UseQueryDefinedReturnType<TData, TError> = UQRT<\n  TData,\n  TError,\n  DefinedQueryObserverResult<TData, TError>\n>\n\nexport type UseQueryOptions<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = WithQueryClientKey<\n  VueQueryObserverOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>\n>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: MaybeRef<\n    Omit<\n      UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'initialData'\n    > & { initialData?: () => undefined }\n  >,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: MaybeRef<\n    Omit<\n      UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'initialData'\n    > & { initialData: TQueryFnData | (() => TQueryFnData) }\n  >,\n): UseQueryDefinedReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: MaybeRef<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: MaybeRef<TQueryKey>,\n  options?: MaybeRef<\n    Omit<\n      UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey' | 'initialData'\n    > & { initialData?: () => undefined }\n  >,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: MaybeRef<TQueryKey>,\n  options?: MaybeRef<\n    Omit<\n      UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey' | 'initialData'\n    > & { initialData: TQueryFnData | (() => TQueryFnData) }\n  >,\n): UseQueryDefinedReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: MaybeRef<TQueryKey>,\n  options?: MaybeRef<\n    Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'queryKey'>\n  >,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: MaybeRef<TQueryKey>,\n  queryFn: MaybeRef<QueryFunction<TQueryFnData, DeepUnwrapRef<TQueryKey>>>,\n  options?: MaybeRef<\n    Omit<\n      UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey' | 'queryFn' | 'initialData'\n    > & { initialData?: () => undefined }\n  >,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: MaybeRef<TQueryKey>,\n  queryFn: MaybeRef<QueryFunction<TQueryFnData, DeepUnwrapRef<TQueryKey>>>,\n  options?: MaybeRef<\n    Omit<\n      UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey' | 'queryFn' | 'initialData'\n    > & { initialData: TQueryFnData | (() => TQueryFnData) }\n  >,\n): UseQueryDefinedReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: MaybeRef<TQueryKey>,\n  queryFn: MaybeRef<QueryFunction<TQueryFnData, DeepUnwrapRef<TQueryKey>>>,\n  options?: MaybeRef<\n    Omit<\n      UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey' | 'queryFn'\n    >\n  >,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | MaybeRef<TQueryKey>\n    | MaybeRef<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n  arg2?:\n    | MaybeRef<QueryFunction<TQueryFnData, DeepUnwrapRef<TQueryKey>>>\n    | MaybeRef<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n  arg3?: MaybeRef<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n):\n  | UseQueryReturnType<TData, TError>\n  | UseQueryDefinedReturnType<TData, TError> {\n  const result = useBaseQuery(QueryObserver, arg1, arg2, arg3)\n\n  return result\n}\n"],"names":["useQuery","arg1","arg2","arg3","result","useBaseQuery","QueryObserver"],"mappings":";;;AA+JO,SAASA,QAAT,CAMLC,IANK,EASLC,IATK,EAYLC,IAZK,EAesC;EAC3C,MAAMC,MAAM,GAAGC,YAAY,CAACC,aAAD,EAAgBL,IAAhB,EAAsBC,IAAtB,EAA4BC,IAA5B,CAA3B,CAAA;AAEA,EAAA,OAAOC,MAAP,CAAA;AACD;;;;"}