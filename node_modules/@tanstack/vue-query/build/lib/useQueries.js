'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var queryCore = require('@tanstack/query-core');
var vueDemi = require('vue-demi');
var useQueryClient = require('./useQueryClient.js');
var utils = require('./utils.js');

/* eslint-disable @typescript-eslint/no-explicit-any */
function useQueries({
  queries,
  queryClient: queryClientInjected
}) {
  var _unreffedQueries$valu, _unreffedQueries$valu2, _ref;

  if (process.env.NODE_ENV === 'development') {
    if (!vueDemi.getCurrentScope()) {
      console.warn('vue-query composables like "useQuery()" should only be used inside a "setup()" function or a running effect scope. They might otherwise lead to memory leaks.');
    }
  }

  const unreffedQueries = vueDemi.computed(() => {
    const clonedQueries = utils.cloneDeepUnref(queries);
    clonedQueries.map(query => {
      if (typeof query.enabled === 'function') {
        query.enabled = query.enabled();
      }
    });
    return clonedQueries;
  });
  const queryClientKey = (_unreffedQueries$valu = unreffedQueries.value[0]) == null ? void 0 : _unreffedQueries$valu.queryClientKey;
  const optionsQueryClient = (_unreffedQueries$valu2 = unreffedQueries.value[0]) == null ? void 0 : _unreffedQueries$valu2.queryClient;
  const queryClient = (_ref = queryClientInjected != null ? queryClientInjected : optionsQueryClient) != null ? _ref : useQueryClient.useQueryClient(queryClientKey);

  if (process.env.NODE_ENV !== 'production' && (queryClientKey || optionsQueryClient)) {
    queryClient.getLogger().error("Providing queryClient to individual queries in useQueries has been deprecated and will be removed in the next major version. You can still pass queryClient as an option directly to useQueries hook.");
  }

  const defaultedQueries = vueDemi.computed(() => unreffedQueries.value.map(options => {
    const defaulted = queryClient.defaultQueryOptions(options);
    defaulted._optimisticResults = queryClient.isRestoring.value ? 'isRestoring' : 'optimistic';
    return defaulted;
  }));
  const observer = new queryCore.QueriesObserver(queryClient, defaultedQueries.value);
  const state = vueDemi.reactive(observer.getCurrentResult());

  let unsubscribe = () => {// noop
  };

  vueDemi.watch(queryClient.isRestoring, isRestoring => {
    if (!isRestoring) {
      unsubscribe();
      unsubscribe = observer.subscribe(result => {
        state.splice(0, result.length, ...result);
      }); // Subscription would not fire for persisted results

      state.splice(0, state.length, ...observer.getOptimisticResult(defaultedQueries.value));
    }
  }, {
    immediate: true
  });
  vueDemi.watch(defaultedQueries, () => {
    observer.setQueries(defaultedQueries.value);
    state.splice(0, state.length, ...observer.getCurrentResult());
  }, {
    flush: 'sync'
  });
  vueDemi.onScopeDispose(() => {
    unsubscribe();
  });
  return vueDemi.readonly(state);
}

exports.useQueries = useQueries;
//# sourceMappingURL=useQueries.js.map
