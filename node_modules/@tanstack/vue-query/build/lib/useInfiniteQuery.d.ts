import type { InfiniteQueryObserverResult, QueryFunction, QueryKey } from '@tanstack/query-core';
import type { UseQueryReturnType } from './useBaseQuery';
import type { DeepUnwrapRef, VueInfiniteQueryObserverOptions, WithQueryClientKey } from './types';
export declare type UseInfiniteQueryOptions<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = WithQueryClientKey<VueInfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>>;
export declare type UseInfiniteQueryReturnType<TData, TError> = UseQueryReturnType<TData, TError, InfiniteQueryObserverResult<TData, TError>>;
export declare function useInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>): UseInfiniteQueryReturnType<TData, TError>;
export declare function useInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: TQueryKey, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'queryKey'>): UseInfiniteQueryReturnType<TData, TError>;
export declare function useInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: TQueryKey, queryFn: QueryFunction<TQueryFnData, DeepUnwrapRef<TQueryKey>>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'queryKey' | 'queryFn'>): UseInfiniteQueryReturnType<TData, TError>;
//# sourceMappingURL=useInfiniteQuery.d.ts.map