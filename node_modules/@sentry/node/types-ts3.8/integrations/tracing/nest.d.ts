interface MinimalNestJsExecutionContext {
    getType: () => string;
    switchToHttp: () => {
        getRequest: () => {
            route?: {
                path?: string;
            };
            method?: string;
        };
    };
}
interface NestJsErrorFilter {
    catch(exception: any, host: any): void;
}
interface MinimalNestJsApp {
    useGlobalFilters: (arg0: NestJsErrorFilter) => void;
    useGlobalInterceptors: (interceptor: {
        intercept: (context: MinimalNestJsExecutionContext, next: {
            handle: () => any;
        }) => any;
    }) => void;
}
export declare const instrumentNest: ((options?: unknown) => void) & {
    id: string;
};
/**
 * Nest framework integration
 *
 * Capture tracing data for nest.
 */
export declare const nestIntegration: () => import("@sentry/types").Integration;
/**
 * Setup an error handler for Nest.
 */
export declare function setupNestErrorHandler(app: MinimalNestJsApp, baseFilter: NestJsErrorFilter): void;
export {};
//# sourceMappingURL=nest.d.ts.map
